// Copyright (c) 2025, zly2006
// Credits to huajiqaq, MIT license.
// Adapted to Kotlin by zly2006.
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without restriction,
// including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software,
// and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
@file:Suppress("ktlint")

package com.github.zly2006.zhihu.util

import java.math.BigInteger
import kotlin.io.encoding.Base64
import kotlin.io.encoding.ExperimentalEncodingApi


val _keySchedule = arrayOf(0xe1,0xc6,0xfc,0xd7,0x71,0x61,0x5d,0x48,0xac,0xb9,0x85,0x9f,0x10,0x35,0x0f,0x2b,0xfe,0xa1,0xe7,0x55,0xb0,0x3c,0xde,0x97,0xc4,0x76,0x12,0x4c,0x86,0x6e,0x2f,0x0f,0x9f,0x3e,0x49,0x1a,0x29,0xac,0x8e,0xf8,0x65,0x08,0x5b,0xe1,0xd4,0xcb,0xba,0x7e,0x42,0x6b,0x97,0x87,0x01,0xcd,0x10,0xe7,0x3d,0x2d,0xdb,0xfc,0x50,0xa9,0x78,0xb8,0x34,0x9b,0x6f,0x02,0x88,0xf6,0x2f,0xa9,0x46,0x1f,0x78,0xc6,0xb6,0xe5,0xd6,0x58,0x69,0x45,0x3d,0x23,0x1c,0xef,0x0b,0xc6,0x90,0x83,0xbe,0xac,0x7d,0xf4,0x5b,0xd0,0xce,0xe9,0xa4,0xbc,0x5d,0x40,0x7a,0x61,0xf1,0xdf,0x28,0x3d,0x04,0x96,0x1e,0x81,0xa6,0xf5,0xcb,0x78,0xde,0x93,0xb7,0x30,0xea,0x51,0x09,0x63,0x28,0x4c,0x8d,0x19,0x79,0x5e,0xb9,0xa4,0xe5,0x13,0xc2,0x05,0xdb,0xfb,0x31,0x25,0x6c,0x8f,0x4d,0x92,0xba,0xdb,0x76,0xc9,0xfc,0x86,0xab,0x20,0x5b,0xe0,0x6a,0x0d,0x36,0x1e,0x9c,0x40,0x27,0x81,0x09,0x65,0x9a,0xdd,0x3c,0xb5,0x16,0x40,0xc1,0x73,0xae,0x58,0xfa,0xe3,0x02,0x18,0x2a,0x38,0x45,0x54,0x62,0x73,0x8d,0x9a,0xa9,0xb9,0xca,0xd7,0xe6,0xf2,0x8b,0x2c,0x1d,0x44,0x39,0xb2,0x96,0xd5,0x04,0x68,0xe5,0x5d,0xfd,0x77,0xa1,0xc4,0x14,0x06,0x81,0x96,0x6e,0x72,0x42,0x5b,0x2c,0x39,0xf9,0xd1,0xe9,0xb9,0xc9,0xa3,0x57,0x79,0xdf,0xfe,0xc2,0x02,0xed,0x1e,0xb6,0xa7,0x96,0x89,0x41,0x25,0x6a,0x3c,0xd5,0xb0,0x5f,0xea,0xaa,0x20,0xfa,0x84,0x78,0xc8,0x4b,0x17,0x9f,0x08,0x3e,0x6c)
// S-Box
val _sBox = arrayOf(0xbb,0xdb,0x76,0xc1,0xfa,0x87,0xa3,0x20,0x52,0xed,0x63,0x00,0x3e,0x19,0x95,0x49,0xd1,0xbd,0x52,0xe3,0xad,0x2d,0xfa,0x84,0x76,0xcf,0x45,0x1b,0x95,0x02,0x39,0x65,0x7a,0x57,0xbf,0xa6,0xe0,0x12,0xc5,0x0d,0xde,0xf6,0x36,0x2f,0x64,0x8f,0x43,0x9b,0xc7,0xe9,0xaf,0xba,0x50,0x4c,0x7f,0x64,0xf0,0xdf,0x25,0x3c,0x0a,0x92,0x16,0x87,0xfb,0xaf,0xe5,0x5f,0xbc,0x3f,0xd6,0x9e,0xc7,0x7c,0x12,0x4d,0x80,0x63,0x21,0x0a,0x88,0x29,0x1d,0x43,0x30,0xbf,0x98,0xdc,0x09,0x64,0xe7,0x56,0xf4,0x7f,0xab,0xc5,0xa0,0xf3,0xc2,0x71,0xda,0x90,0xb2,0x3e,0xe9,0x53,0x0a,0x65,0x2d,0x49,0x86,0x1e,0x2b,0x8f,0x0c,0x6b,0x97,0xd5,0x39,0xb4,0x19,0x47,0xcc,0x79,0xa6,0x52,0xff,0xe0,0x58,0x7d,0xd8,0xff,0xcd,0x03,0xeb,0x11,0xb3,0xa7,0x9d,0x87,0x4f,0x20,0x62,0x35,0xe9,0xcd,0xfe,0xdd,0x7e,0x68,0x59,0x47,0xa9,0xbf,0x84,0x9c,0x1c,0x3e,0x02,0x2b,0x6d,0x43,0x3e,0x27,0x18,0xe5,0x06,0xc7,0x90,0x85,0xbc,0xad,0x78,0xf0,0x52,0xd4,0x0a,0x1f,0x2d,0x3e,0x45,0x55,0x6b,0x72,0x8a,0x9e,0xa8,0xb6,0xc5,0xd4,0xe6,0xfd,0x39,0x92,0x66,0x05,0x82,0xf7,0x2f,0xa0,0x4e,0x17,0x78,0xc2,0xbc,0xeb,0xd4,0x50,0x19,0x07,0x8d,0x90,0x64,0x79,0x4f,0x5c,0x25,0x3e,0xf6,0xdc,0xe4,0xbb,0xc9,0xa9,0x9e,0x35,0x40,0x16,0x29,0xa4,0x80,0xf5,0x63,0x02,0x5a,0xe9,0xdf,0xc4,0xbf,0x72,0x4f,0x66,0x94,0x8d,0x02,0xc7,0x16,0xea,0x31,0x2e,0xdb,0xf3,0x5d,0xa8,0x75,0xb4)
// 轮常量
val _roundConstants: Array<UByte> = arrayOf<UByte>(0x09u, 0x6Eu, 0x11u, 0xFCu, 0x8Cu, 0x53u, 0xE8u, 0x3Bu, 0x74u, 0x95u, 0xC2u, 0x28u, 0xD2u, 0x46u, 0xB3u, 0xABu, 0x6Du, 0x08u, 0x75u, 0x97u, 0xEBu, 0x38u, 0x87u, 0x53u, 0x16u, 0xF4u, 0xADu, 0x4Fu, 0xBCu, 0x26u, 0xD2u, 0xCDu, 0x1Eu, 0x7Au, 0x0Eu, 0xEEu, 0x97u, 0x4Cu, 0xF0u, 0x28u, 0x69u, 0x82u, 0xDCu, 0x35u, 0xC0u, 0x5Bu, 0xA7u, 0xB6u, 0xFCu, 0x9Du, 0xE6u, 0x02u, 0x79u, 0xABu, 0x1Bu, 0xC4u, 0x85u, 0x60u, 0x3Fu, 0xD5u, 0x2Du, 0xB2u, 0x4Bu, 0x5Au, 0x8Bu, 0xECu, 0x90u, 0x7Du, 0x04u, 0xD7u, 0x62u, 0xB2u, 0xF0u, 0x1Eu, 0x4Bu, 0xA8u, 0x57u, 0xC9u, 0x30u, 0x2Au, 0x51u, 0x32u, 0x4Au, 0xA5u, 0xD0u, 0x0Eu, 0xBBu, 0x68u, 0x2Cu, 0xCEu, 0x9Fu, 0x76u, 0x80u, 0x1Au, 0xE8u, 0xFEu, 0xE3u, 0x82u, 0xF6u, 0x14u, 0x62u, 0xB3u, 0x0Bu, 0xD1u, 0x94u, 0x76u, 0x24u, 0xC2u, 0x33u, 0xA2u, 0x5Bu, 0x49u, 0x3Fu, 0x54u, 0x2Cu, 0xCBu, 0xB1u, 0x62u, 0xD1u, 0x0Bu, 0x4Bu, 0xAFu, 0xFBu, 0x1Au, 0xE2u, 0x74u, 0x81u, 0x94u, 0x75u, 0x17u, 0x68u, 0x85u, 0xF6u, 0x2Au, 0x95u, 0x49u, 0x07u, 0xE0u, 0xBFu, 0x5Fu, 0xABu, 0x34u, 0xC5u, 0xD6u, 0x93u, 0xFCu, 0x83u, 0x6Eu, 0x1Cu, 0xC6u, 0x74u, 0xA2u, 0xE8u, 0x0Du, 0x58u, 0xBEu, 0x47u, 0xDAu, 0x22u, 0x31u, 0xC9u, 0xAAu, 0xD9u, 0x37u, 0x43u, 0x94u, 0x2Eu, 0xF8u, 0xBEu, 0x59u, 0x0Au, 0xE6u, 0x14u, 0x88u, 0x79u, 0x68u, 0x22u, 0x45u, 0x3Au, 0xDDu, 0xA3u, 0x7Cu, 0xCFu, 0x11u, 0x57u, 0xB1u, 0xE8u, 0x03u, 0xFDu, 0x6Cu, 0x9Eu, 0x88u, 0xDCu, 0xB5u, 0xCDu, 0x29u, 0x56u, 0x86u, 0x3Cu, 0xEDu, 0xAAu, 0x4Au, 0x1Bu, 0xFBu, 0x0Du, 0x97u, 0x65u, 0x72u, 0x4Cu, 0x28u, 0x5Du, 0xB0u, 0xCFu, 0x13u, 0xA0u, 0x76u, 0x35u, 0xD1u, 0x82u, 0x64u, 0x95u, 0x0Eu, 0xFBu, 0xE8u, 0xB3u, 0xDEu, 0xA6u, 0x40u, 0x39u, 0xE2u, 0x50u, 0x86u, 0xCBu, 0x2Fu, 0x70u, 0x9Cu, 0x69u, 0xF3u, 0x02u, 0x1Au, 0xAFu, 0xC0u, 0xB4u, 0x55u, 0x20u, 0xFEu, 0x49u, 0x93u, 0xDEu, 0x38u, 0x61u, 0x84u, 0x76u, 0xE7u, 0x1Eu, 0x01u)
val _dict1: Array<UInt> = arrayOf(0x0C1717DAu, 0xF08A8A36u, 0xC89A9A19u, 0x3F9797DEu, 0x574D4D35u, 0xF48C8C38u, 0x72D6D65Cu, 0x1D6D6DFBu, 0x4C8787CAu, 0xC5CBCBB5u, 0x428F8FC9u, 0x1C6868F4u, 0xD56B6B45u, 0x52AFAFE9u, 0x13F9F96Du, 0x3CC8C804u, 0x01B6B60Fu, 0xD26F6F49u, 0x6236367Cu, 0x270D0D75u, 0x24D9D987u, 0x982A2AF9u, 0x61EFEF86u, 0x7E020224u, 0xC6939317u, 0x7309092Du, 0x584A4A39u, 0x106A6AF6u, 0x3E9292D4u, 0x448989C7u, 0x11FFFF66u, 0x534C4C30u, 0xD4696947u, 0xB3B9B9BDu, 0xDA626243u, 0x9C57576Au, 0x29DEDE80u, 0xAC37372Au, 0x6A35357Eu, 0xFE7272E4u, 0x051B1BD5u, 0x7CD8D854u, 0xF37979EDu, 0xB1BFBFB6u, 0x389494DCu, 0x7F07072Eu, 0xB8B4B4BCu, 0x2B010171u, 0x35C1C102u, 0x7AD5D55Eu, 0x77000022u, 0x4B717191u, 0x8DADAD9Bu, 0x6D3D3D7Bu, 0x196363FDu, 0x75D1D152u, 0x041919D7u, 0x22DFDF89u, 0x884444CCu, 0xAD303021u, 0x84ACAC98u, 0x26030377u, 0xB913131Du, 0xA7EDED55u, 0x5DA0A0E1u, 0xAFE8E853u, 0x603A3A76u, 0x5B414131u, 0x32C6C60Cu, 0x972D2DF5u, 0xDFF8F8A3u, 0xBBBBBBBBu, 0xE95353ADu, 0x5E45453Au, 0xD1F6F6AFu, 0x8E4242C4u, 0x146C6CF8u, 0x1A6565FEu, 0x9D505061u, 0xFB7B7BEBu, 0x156161F2u, 0xA1E6E65Fu, 0xA8EAEA59u, 0xF983833Du, 0x50A4A4EFu, 0x6C383874u, 0x68E4E48Cu, 0xE329294Du, 0xC2CFCFB9u, 0xFD8D8D3Bu, 0xCF989813u, 0xA4393927u, 0x0BB1B101u, 0x864E4EC8u, 0xD6F3F3A7u, 0xB01A1A16u, 0xCB919111u, 0x65313172u, 0x46737397u, 0xBA15151Eu, 0x498E8EC0u, 0x230C0C70u, 0xDEF5F5AAu, 0xF87474ECu, 0x319F9FD6u, 0xD96E6E40u, 0xE05A5AA6u, 0xEC5858A4u, 0xBC181814u, 0x80AAAA96u, 0x925F5F69u, 0x2106067Fu, 0x30CACA06u, 0xE12F2F46u, 0xF67E7EE8u, 0xE7202042u, 0x932C2CF0u, 0xCDC0C0B1u, 0x379090D2u, 0x2AD2D283u, 0xA034342Fu, 0x126666FCu, 0x85A1A192u, 0x94595967u, 0x7804042Cu, 0x408484CFu, 0xC4C9C9B7u, 0xE62E2E48u, 0xEF27274Eu, 0xDC67674Au, 0x0FB8B803u, 0xA23F3F29u, 0xB6BEBEB8u, 0x6FE7E78Eu, 0x2DD0D081u, 0x9F2828F3u, 0xF286863Cu, 0x5146463Fu, 0x20D4D48Fu, 0xA53B3B25u, 0xC79D9D15u, 0x5AA2A2E3u, 0xF17F7FE6u, 0xD7FDFDA5u, 0x4A8282C3u, 0xE25656ACu, 0xB41C1C18u, 0xCAC2C2B3u, 0x70DADA56u, 0xF77070E2u, 0x7B0B0B2Bu, 0x1BFBFB6Bu, 0x8CA8A894u, 0xC0C4C4BFu, 0x34CCCC08u, 0x874040C2u, 0x5CA7A7EAu, 0x995E5E60u, 0x9B2121F1u, 0x2CD7D78Au, 0x962323F7u, 0x67E0E082u, 0x66EEEE88u, 0x280A0A79u, 0xBEB2B2B4u, 0xED5D5DABu, 0x091E1ED0u, 0x9054546Fu, 0x834949CDu, 0x06B3B307u, 0xDD606041u, 0x3B9B9BDBu, 0x79D3D35Du, 0xE824244Cu, 0xC9CECEB0u, 0xDBF1F1A1u, 0xC196961Fu, 0xEB2B2B4Bu, 0xCE95951Au, 0xFA85853Eu, 0xAEE5E55Au, 0x4E75759Au, 0x39C3C30Du, 0x339999DDu, 0x63E9E98Du, 0xD064644Fu, 0x54A9A9E7u, 0x6EE2E284u, 0x369E9ED8u, 0xB7B0B0B2u, 0xA3ECEC50u, 0xCCC7C7BAu, 0x4D8080C1u, 0x17F0F062u, 0x08BABA09u, 0xEA5555AEu, 0xA93E3E20u, 0x03BCBC00u, 0x955B5B65u, 0xBD1D1D1Bu, 0x487A7A99u, 0xABE1E151u, 0x814F4FC6u, 0xB216161Cu, 0x760E0E28u, 0x7DDDDD5Bu, 0x1FF7F76Eu, 0xE45C5CA8u, 0x0D1010D1u, 0x16FEFE68u, 0x82A6A69Cu, 0x0EB5B50Au, 0x4F787893u, 0x710F0F26u, 0x89A3A39Du, 0xD3FCFCA0u, 0xE55151A2u, 0xB5111112u, 0x56434337u, 0x6BEBEB8Bu, 0x8AA5A59Eu, 0x6933337Du, 0x25DBDB85u, 0xFF7777EEu, 0x643C3C78u, 0x18F4F46Cu, 0x3AC5C50Eu, 0x74DCDC58u, 0xD8FAFAA9u, 0xC39C9C10u, 0x8B4B4BCBu, 0xFC888834u, 0xBFB7B7BEu, 0x001414DFu, 0x912626FFu, 0x55ABABE5u, 0xF5818132u, 0x3DCDCD0Bu, 0xEE222244u, 0x1EF2F264u, 0x0A1212D3u, 0x8F4747CEu, 0x2F080873u, 0x437C7C90u, 0xA6E3E357u, 0x9A525263u, 0x477D7D95u, 0x4176769Fu, 0x59AEAEE0u, 0x458B8BC5u, 0xAA323223u, 0x07BDBD05u, 0x021F1FD9u, 0x9E2525FAu, 0x5F484833u, 0x2E05057Au)
val _dict2: Array<UInt> = arrayOf(0xDA0C1717u, 0x36F08A8Au, 0x19C89A9Au, 0xDE3F9797u, 0x35574D4Du, 0x38F48C8Cu, 0x5C72D6D6u, 0xFB1D6D6Du, 0xCA4C8787u, 0xB5C5CBCBu, 0xC9428F8Fu, 0xF41C6868u, 0x45D56B6Bu, 0xE952AFAFu, 0x6D13F9F9u, 0x043CC8C8u, 0x0F01B6B6u, 0x49D26F6Fu, 0x7C623636u, 0x75270D0Du, 0x8724D9D9u, 0xF9982A2Au, 0x8661EFEFu, 0x247E0202u, 0x17C69393u, 0x2D730909u, 0x39584A4Au, 0xF6106A6Au, 0xD43E9292u, 0xC7448989u, 0x6611FFFFu, 0x30534C4Cu, 0x47D46969u, 0xBDB3B9B9u, 0x43DA6262u, 0x6A9C5757u, 0x8029DEDEu, 0x2AAC3737u, 0x7E6A3535u, 0xE4FE7272u, 0xD5051B1Bu, 0x547CD8D8u, 0xEDF37979u, 0xB6B1BFBFu, 0xDC389494u, 0x2E7F0707u, 0xBCB8B4B4u, 0x712B0101u, 0x0235C1C1u, 0x5E7AD5D5u, 0x22770000u, 0x914B7171u, 0x9B8DADADu, 0x7B6D3D3Du, 0xFD196363u, 0x5275D1D1u, 0xD7041919u, 0x8922DFDFu, 0xCC884444u, 0x21AD3030u, 0x9884ACACu, 0x77260303u, 0x1DB91313u, 0x55A7EDEDu, 0xE15DA0A0u, 0x53AFE8E8u, 0x76603A3Au, 0x315B4141u, 0x0C32C6C6u, 0xF5972D2Du, 0xA3DFF8F8u, 0xBBBBBBBBu, 0xADE95353u, 0x3A5E4545u, 0xAFD1F6F6u, 0xC48E4242u, 0xF8146C6Cu, 0xFE1A6565u, 0x619D5050u, 0xEBFB7B7Bu, 0xF2156161u, 0x5FA1E6E6u, 0x59A8EAEAu, 0x3DF98383u, 0xEF50A4A4u, 0x746C3838u, 0x8C68E4E4u, 0x4DE32929u, 0xB9C2CFCFu, 0x3BFD8D8Du, 0x13CF9898u, 0x27A43939u, 0x010BB1B1u, 0xC8864E4Eu, 0xA7D6F3F3u, 0x16B01A1Au, 0x11CB9191u, 0x72653131u, 0x97467373u, 0x1EBA1515u, 0xC0498E8Eu, 0x70230C0Cu, 0xAADEF5F5u, 0xECF87474u, 0xD6319F9Fu, 0x40D96E6Eu, 0xA6E05A5Au, 0xA4EC5858u, 0x14BC1818u, 0x9680AAAAu, 0x69925F5Fu, 0x7F210606u, 0x0630CACAu, 0x46E12F2Fu, 0xE8F67E7Eu, 0x42E72020u, 0xF0932C2Cu, 0xB1CDC0C0u, 0xD2379090u, 0x832AD2D2u, 0x2FA03434u, 0xFC126666u, 0x9285A1A1u, 0x67945959u, 0x2C780404u, 0xCF408484u, 0xB7C4C9C9u, 0x48E62E2Eu, 0x4EEF2727u, 0x4ADC6767u, 0x030FB8B8u, 0x29A23F3Fu, 0xB8B6BEBEu, 0x8E6FE7E7u, 0x812DD0D0u, 0xF39F2828u, 0x3CF28686u, 0x3F514646u, 0x8F20D4D4u, 0x25A53B3Bu, 0x15C79D9Du, 0xE35AA2A2u, 0xE6F17F7Fu, 0xA5D7FDFDu, 0xC34A8282u, 0xACE25656u, 0x18B41C1Cu, 0xB3CAC2C2u, 0x5670DADAu, 0xE2F77070u, 0x2B7B0B0Bu, 0x6B1BFBFBu, 0x948CA8A8u, 0xBFC0C4C4u, 0x0834CCCCu, 0xC2874040u, 0xEA5CA7A7u, 0x60995E5Eu, 0xF19B2121u, 0x8A2CD7D7u, 0xF7962323u, 0x8267E0E0u, 0x8866EEEEu, 0x79280A0Au, 0xB4BEB2B2u, 0xABED5D5Du, 0xD0091E1Eu, 0x6F905454u, 0xCD834949u, 0x0706B3B3u, 0x41DD6060u, 0xDB3B9B9Bu, 0x5D79D3D3u, 0x4CE82424u, 0xB0C9CECEu, 0xA1DBF1F1u, 0x1FC19696u, 0x4BEB2B2Bu, 0x1ACE9595u, 0x3EFA8585u, 0x5AAEE5E5u, 0x9A4E7575u, 0x0D39C3C3u, 0xDD339999u, 0x8D63E9E9u, 0x4FD06464u, 0xE754A9A9u, 0x846EE2E2u, 0xD8369E9Eu, 0xB2B7B0B0u, 0x50A3ECECu, 0xBACCC7C7u, 0xC14D8080u, 0x6217F0F0u, 0x0908BABAu, 0xAEEA5555u, 0x20A93E3Eu, 0x0003BCBCu, 0x65955B5Bu, 0x1BBD1D1Du, 0x99487A7Au, 0x51ABE1E1u, 0xC6814F4Fu, 0x1CB21616u, 0x28760E0Eu, 0x5B7DDDDDu, 0x6E1FF7F7u, 0xA8E45C5Cu, 0xD10D1010u, 0x6816FEFEu, 0x9C82A6A6u, 0x0A0EB5B5u, 0x934F7878u, 0x26710F0Fu, 0x9D89A3A3u, 0xA0D3FCFCu, 0xA2E55151u, 0x12B51111u, 0x37564343u, 0x8B6BEBEBu, 0x9E8AA5A5u, 0x7D693333u, 0x8525DBDBu, 0xEEFF7777u, 0x78643C3Cu, 0x6C18F4F4u, 0x0E3AC5C5u, 0x5874DCDCu, 0xA9D8FAFAu, 0x10C39C9Cu, 0xCB8B4B4Bu, 0x34FC8888u, 0xBEBFB7B7u, 0xDF001414u, 0xFF912626u, 0xE555ABABu, 0x32F58181u, 0x0B3DCDCDu, 0x44EE2222u, 0x641EF2F2u, 0xD30A1212u, 0xCE8F4747u, 0x732F0808u, 0x90437C7Cu, 0x57A6E3E3u, 0x639A5252u, 0x95477D7Du, 0x9F417676u, 0xE059AEAEu, 0xC5458B8Bu, 0x23AA3232u, 0x0507BDBDu, 0xD9021F1Fu, 0xFA9E2525u, 0x335F4848u, 0x7A2E0505u)
val _dict3 = arrayOf(0x17DA0C17u, 0x8A36F08Au, 0x9A19C89Au, 0x97DE3F97u, 0x4D35574Du, 0x8C38F48Cu, 0xD65C72D6u, 0x6DFB1D6Du, 0x87CA4C87u, 0xCBB5C5CBu, 0x8FC9428Fu, 0x68F41C68u, 0x6B45D56Bu, 0xAFE952AFu, 0xF96D13F9u, 0xC8043CC8u, 0xB60F01B6u, 0x6F49D26Fu, 0x367C6236u, 0x0D75270Du, 0xD98724D9u, 0x2AF9982Au, 0xEF8661EFu, 0x02247E02u, 0x9317C693u, 0x092D7309u, 0x4A39584Au, 0x6AF6106Au, 0x92D43E92u, 0x89C74489u, 0xFF6611FFu, 0x4C30534Cu, 0x6947D469u, 0xB9BDB3B9u, 0x6243DA62u, 0x576A9C57u, 0xDE8029DEu, 0x372AAC37u, 0x357E6A35u, 0x72E4FE72u, 0x1BD5051Bu, 0xD8547CD8u, 0x79EDF379u, 0xBFB6B1BFu, 0x94DC3894u, 0x072E7F07u, 0xB4BCB8B4u, 0x01712B01u, 0xC10235C1u, 0xD55E7AD5u, 0x00227700u, 0x71914B71u, 0xAD9B8DADu, 0x3D7B6D3Du, 0x63FD1963u, 0xD15275D1u, 0x19D70419u, 0xDF8922DFu, 0x44CC8844u, 0x3021AD30u, 0xAC9884ACu, 0x03772603u, 0x131DB913u, 0xED55A7EDu, 0xA0E15DA0u, 0xE853AFE8u, 0x3A76603Au, 0x41315B41u, 0xC60C32C6u, 0x2DF5972Du, 0xF8A3DFF8u, 0xBBBBBBBBu, 0x53ADE953u, 0x453A5E45u, 0xF6AFD1F6u, 0x42C48E42u, 0x6CF8146Cu, 0x65FE1A65u, 0x50619D50u, 0x7BEBFB7Bu, 0x61F21561u, 0xE65FA1E6u, 0xEA59A8EAu, 0x833DF983u, 0xA4EF50A4u, 0x38746C38u, 0xE48C68E4u, 0x294DE329u, 0xCFB9C2CFu, 0x8D3BFD8Du, 0x9813CF98u, 0x3927A439u, 0xB1010BB1u, 0x4EC8864Eu, 0xF3A7D6F3u, 0x1A16B01Au, 0x9111CB91u, 0x31726531u, 0x73974673u, 0x151EBA15u, 0x8EC0498Eu, 0x0C70230Cu, 0xF5AADEF5u, 0x74ECF874u, 0x9FD6319Fu, 0x6E40D96Eu, 0x5AA6E05Au, 0x58A4EC58u, 0x1814BC18u, 0xAA9680AAu, 0x5F69925Fu, 0x067F2106u, 0xCA0630CAu, 0x2F46E12Fu, 0x7EE8F67Eu, 0x2042E720u, 0x2CF0932Cu, 0xC0B1CDC0u, 0x90D23790u, 0xD2832AD2u, 0x342FA034u, 0x66FC1266u, 0xA19285A1u, 0x59679459u, 0x042C7804u, 0x84CF4084u, 0xC9B7C4C9u, 0x2E48E62Eu, 0x274EEF27u, 0x674ADC67u, 0xB8030FB8u, 0x3F29A23Fu, 0xBEB8B6BEu, 0xE78E6FE7u, 0xD0812DD0u, 0x28F39F28u, 0x863CF286u, 0x463F5146u, 0xD48F20D4u, 0x3B25A53Bu, 0x9D15C79Du, 0xA2E35AA2u, 0x7FE6F17Fu, 0xFDA5D7FDu, 0x82C34A82u, 0x56ACE256u, 0x1C18B41Cu, 0xC2B3CAC2u, 0xDA5670DAu, 0x70E2F770u, 0x0B2B7B0Bu, 0xFB6B1BFBu, 0xA8948CA8u, 0xC4BFC0C4u, 0xCC0834CCu, 0x40C28740u, 0xA7EA5CA7u, 0x5E60995Eu, 0x21F19B21u, 0xD78A2CD7u, 0x23F79623u, 0xE08267E0u, 0xEE8866EEu, 0x0A79280Au, 0xB2B4BEB2u, 0x5DABED5Du, 0x1ED0091Eu, 0x546F9054u, 0x49CD8349u, 0xB30706B3u, 0x6041DD60u, 0x9BDB3B9Bu, 0xD35D79D3u, 0x244CE824u, 0xCEB0C9CEu, 0xF1A1DBF1u, 0x961FC196u, 0x2B4BEB2Bu, 0x951ACE95u, 0x853EFA85u, 0xE55AAEE5u, 0x759A4E75u, 0xC30D39C3u, 0x99DD3399u, 0xE98D63E9u, 0x644FD064u, 0xA9E754A9u, 0xE2846EE2u, 0x9ED8369Eu, 0xB0B2B7B0u, 0xEC50A3ECu, 0xC7BACCC7u, 0x80C14D80u, 0xF06217F0u, 0xBA0908BAu, 0x55AEEA55u, 0x3E20A93Eu, 0xBC0003BCu, 0x5B65955Bu, 0x1D1BBD1Du, 0x7A99487Au, 0xE151ABE1u, 0x4FC6814Fu, 0x161CB216u, 0x0E28760Eu, 0xDD5B7DDDu, 0xF76E1FF7u, 0x5CA8E45Cu, 0x10D10D10u, 0xFE6816FEu, 0xA69C82A6u, 0xB50A0EB5u, 0x78934F78u, 0x0F26710Fu, 0xA39D89A3u, 0xFCA0D3FCu, 0x51A2E551u, 0x1112B511u, 0x43375643u, 0xEB8B6BEBu, 0xA59E8AA5u, 0x337D6933u, 0xDB8525DBu, 0x77EEFF77u, 0x3C78643Cu, 0xF46C18F4u, 0xC50E3AC5u, 0xDC5874DCu, 0xFAA9D8FAu, 0x9C10C39Cu, 0x4BCB8B4Bu, 0x8834FC88u, 0xB7BEBFB7u, 0x14DF0014u, 0x26FF9126u, 0xABE555ABu, 0x8132F581u, 0xCD0B3DCDu, 0x2244EE22u, 0xF2641EF2u, 0x12D30A12u, 0x47CE8F47u, 0x08732F08u, 0x7C90437Cu, 0xE357A6E3u, 0x52639A52u, 0x7D95477Du, 0x769F4176u, 0xAEE059AEu, 0x8BC5458Bu, 0x3223AA32u, 0xBD0507BDu, 0x1FD9021Fu, 0x25FA9E25u, 0x48335F48u, 0x057A2E05u)
val _dict4: Array<UInt> = arrayOf(0x1717DA0Cu, 0x8A8A36F0u, 0x9A9A19C8u, 0x9797DE3Fu, 0x4D4D3557u, 0x8C8C38F4u, 0xD6D65C72u, 0x6D6DFB1Du, 0x8787CA4Cu, 0xCBCBB5C5u, 0x8F8FC942u, 0x6868F41Cu, 0x6B6B45D5u, 0xAFAFE952u, 0xF9F96D13u, 0xC8C8043Cu, 0xB6B60F01u, 0x6F6F49D2u, 0x36367C62u, 0x0D0D7527u, 0xD9D98724u, 0x2A2AF998u, 0xEFEF8661u, 0x0202247Eu, 0x939317C6u, 0x09092D73u, 0x4A4A3958u, 0x6A6AF610u, 0x9292D43Eu, 0x8989C744u, 0xFFFF6611u, 0x4C4C3053u, 0x696947D4u, 0xB9B9BDB3u, 0x626243DAu, 0x57576A9Cu, 0xDEDE8029u, 0x37372AACu, 0x35357E6Au, 0x7272E4FEu, 0x1B1BD505u, 0xD8D8547Cu, 0x7979EDF3u, 0xBFBFB6B1u, 0x9494DC38u, 0x07072E7Fu, 0xB4B4BCB8u, 0x0101712Bu, 0xC1C10235u, 0xD5D55E7Au, 0x00002277u, 0x7171914Bu, 0xADAD9B8Du, 0x3D3D7B6Du, 0x6363FD19u, 0xD1D15275u, 0x1919D704u, 0xDFDF8922u, 0x4444CC88u, 0x303021ADu, 0xACAC9884u, 0x03037726u, 0x13131DB9u, 0xEDED55A7u, 0xA0A0E15Du, 0xE8E853AFu, 0x3A3A7660u, 0x4141315Bu, 0xC6C60C32u, 0x2D2DF597u, 0xF8F8A3DFu, 0xBBBBBBBBu, 0x5353ADE9u, 0x45453A5Eu, 0xF6F6AFD1u, 0x4242C48Eu, 0x6C6CF814u, 0x6565FE1Au, 0x5050619Du, 0x7B7BEBFBu, 0x6161F215u, 0xE6E65FA1u, 0xEAEA59A8u, 0x83833DF9u, 0xA4A4EF50u, 0x3838746Cu, 0xE4E48C68u, 0x29294DE3u, 0xCFCFB9C2u, 0x8D8D3BFDu, 0x989813CFu, 0x393927A4u, 0xB1B1010Bu, 0x4E4EC886u, 0xF3F3A7D6u, 0x1A1A16B0u, 0x919111CBu, 0x31317265u, 0x73739746u, 0x15151EBAu, 0x8E8EC049u, 0x0C0C7023u, 0xF5F5AADEu, 0x7474ECF8u, 0x9F9FD631u, 0x6E6E40D9u, 0x5A5AA6E0u, 0x5858A4ECu, 0x181814BCu, 0xAAAA9680u, 0x5F5F6992u, 0x06067F21u, 0xCACA0630u, 0x2F2F46E1u, 0x7E7EE8F6u, 0x202042E7u, 0x2C2CF093u, 0xC0C0B1CDu, 0x9090D237u, 0xD2D2832Au, 0x34342FA0u, 0x6666FC12u, 0xA1A19285u, 0x59596794u, 0x04042C78u, 0x8484CF40u, 0xC9C9B7C4u, 0x2E2E48E6u, 0x27274EEFu, 0x67674ADCu, 0xB8B8030Fu, 0x3F3F29A2u, 0xBEBEB8B6u, 0xE7E78E6Fu, 0xD0D0812Du, 0x2828F39Fu, 0x86863CF2u, 0x46463F51u, 0xD4D48F20u, 0x3B3B25A5u, 0x9D9D15C7u, 0xA2A2E35Au, 0x7F7FE6F1u, 0xFDFDA5D7u, 0x8282C34Au, 0x5656ACE2u, 0x1C1C18B4u, 0xC2C2B3CAu, 0xDADA5670u, 0x7070E2F7u, 0x0B0B2B7Bu, 0xFBFB6B1Bu, 0xA8A8948Cu, 0xC4C4BFC0u, 0xCCCC0834u, 0x4040C287u, 0xA7A7EA5Cu, 0x5E5E6099u, 0x2121F19Bu, 0xD7D78A2Cu, 0x2323F796u, 0xE0E08267u, 0xEEEE8866u, 0x0A0A7928u, 0xB2B2B4BEu, 0x5D5DABEDu, 0x1E1ED009u, 0x54546F90u, 0x4949CD83u, 0xB3B30706u, 0x606041DDu, 0x9B9BDB3Bu, 0xD3D35D79u, 0x24244CE8u, 0xCECEB0C9u, 0xF1F1A1DBu, 0x96961FC1u, 0x2B2B4BEBu, 0x95951ACEu, 0x85853EFAu, 0xE5E55AAEu, 0x75759A4Eu, 0xC3C30D39u, 0x9999DD33u, 0xE9E98D63u, 0x64644FD0u, 0xA9A9E754u, 0xE2E2846Eu, 0x9E9ED836u, 0xB0B0B2B7u, 0xECEC50A3u, 0xC7C7BACCu, 0x8080C14Du, 0xF0F06217u, 0xBABA0908u, 0x5555AEEAu, 0x3E3E20A9u, 0xBCBC0003u, 0x5B5B6595u, 0x1D1D1BBDu, 0x7A7A9948u, 0xE1E151ABu, 0x4F4FC681u, 0x16161CB2u, 0x0E0E2876u, 0xDDDD5B7Du, 0xF7F76E1Fu, 0x5C5CA8E4u, 0x1010D10Du, 0xFEFE6816u, 0xA6A69C82u, 0xB5B50A0Eu, 0x7878934Fu, 0x0F0F2671u, 0xA3A39D89u, 0xFCFCA0D3u, 0x5151A2E5u, 0x111112B5u, 0x43433756u, 0xEBEB8B6Bu, 0xA5A59E8Au, 0x33337D69u, 0xDBDB8525u, 0x7777EEFFu, 0x3C3C7864u, 0xF4F46C18u, 0xC5C50E3Au, 0xDCDC5874u, 0xFAFAA9D8u, 0x9C9C10C3u, 0x4B4BCB8Bu, 0x888834FCu, 0xB7B7BEBFu, 0x1414DF00u, 0x2626FF91u, 0xABABE555u, 0x818132F5u, 0xCDCD0B3Du, 0x222244EEu, 0xF2F2641Eu, 0x1212D30Au, 0x4747CE8Fu, 0x0808732Fu, 0x7C7C9043u, 0xE3E357A6u, 0x5252639Au, 0x7D7D9547u, 0x76769F41u, 0xAEAEE059u, 0x8B8BC545u, 0x323223AAu, 0xBDBD0507u, 0x1F1FD902u, 0x2525FA9Eu, 0x4848335Fu, 0x05057A2Eu)
val _dict5 = arrayOf<UByte>(0x17u, 0x8Au, 0x9Au, 0x97u, 0x4Du, 0x8Cu, 0xD6u, 0x6Du, 0x87u, 0xCBu, 0x8Fu, 0x68u, 0x6Bu, 0xAFu, 0xF9u, 0xC8u, 0xB6u, 0x6Fu, 0x36u, 0x0Du, 0xD9u, 0x2Au, 0xEFu, 0x02u, 0x93u, 0x09u, 0x4Au, 0x6Au, 0x92u, 0x89u, 0xFFu, 0x4Cu, 0x69u, 0xB9u, 0x62u, 0x57u, 0xDEu, 0x37u, 0x35u, 0x72u, 0x1Bu, 0xD8u, 0x79u, 0xBFu, 0x94u, 0x07u, 0xB4u, 0x01u, 0xC1u, 0xD5u, 0x00u, 0x71u, 0xADu, 0x3Du, 0x63u, 0xD1u, 0x19u, 0xDFu, 0x44u, 0x30u, 0xACu, 0x03u, 0x13u, 0xEDu, 0xA0u, 0xE8u, 0x3Au, 0x41u, 0xC6u, 0x2Du, 0xF8u, 0xBBu, 0x53u, 0x45u, 0xF6u, 0x42u, 0x6Cu, 0x65u, 0x50u, 0x7Bu, 0x61u, 0xE6u, 0xEAu, 0x83u, 0xA4u, 0x38u, 0xE4u, 0x29u, 0xCFu, 0x8Du, 0x98u, 0x39u, 0xB1u, 0x4Eu, 0xF3u, 0x1Au, 0x91u, 0x31u, 0x73u, 0x15u, 0x8Eu, 0x0Cu, 0xF5u, 0x74u, 0x9Fu, 0x6Eu, 0x5Au, 0x58u, 0x18u, 0xAAu, 0x5Fu, 0x06u, 0xCAu, 0x2Fu, 0x7Eu, 0x20u, 0x2Cu, 0xC0u, 0x90u, 0xD2u, 0x34u, 0x66u, 0xA1u, 0x59u, 0x04u, 0x84u, 0xC9u, 0x2Eu, 0x27u, 0x67u, 0xB8u, 0x3Fu, 0xBEu, 0xE7u, 0xD0u, 0x28u, 0x86u, 0x46u, 0xD4u, 0x3Bu, 0x9Du, 0xA2u, 0x7Fu, 0xFDu, 0x82u, 0x56u, 0x1Cu, 0xC2u, 0xDAu, 0x70u, 0x0Bu, 0xFBu, 0xA8u, 0xC4u, 0xCCu, 0x40u, 0xA7u, 0x5Eu, 0x21u, 0xD7u, 0x23u, 0xE0u, 0xEEu, 0x0Au, 0xB2u, 0x5Du, 0x1Eu, 0x54u, 0x49u, 0xB3u, 0x60u, 0x9Bu, 0xD3u, 0x24u, 0xCEu, 0xF1u, 0x96u, 0x2Bu, 0x95u, 0x85u, 0xE5u, 0x75u, 0xC3u, 0x99u, 0xE9u, 0x64u, 0xA9u, 0xE2u, 0x9Eu, 0xB0u, 0xECu, 0xC7u, 0x80u, 0xF0u, 0xBAu, 0x55u, 0x3Eu, 0xBCu, 0x5Bu, 0x1Du, 0x7Au, 0xE1u, 0x4Fu, 0x16u, 0x0Eu, 0xDDu, 0xF7u, 0x5Cu, 0x10u, 0xFEu, 0xA6u, 0xB5u, 0x78u, 0x0Fu, 0xA3u, 0xFCu, 0x51u, 0x11u, 0x43u, 0xEBu, 0xA5u, 0x33u, 0xDBu, 0x77u, 0x3Cu, 0xF4u, 0xC5u, 0xDCu, 0xFAu, 0x9Cu, 0x4Bu, 0x88u, 0xB7u, 0x14u, 0x26u, 0xABu, 0x81u, 0xCDu, 0x22u, 0xF2u, 0x12u, 0x47u, 0x08u, 0x7Cu, 0xE3u, 0x52u, 0x7Du, 0x76u, 0xAEu, 0x8Bu, 0x32u, 0xBDu, 0x1Fu, 0x25u, 0x48u, 0x05u)

fun zse96Sign(md5: String) {
    require(_dict1.size == 1024 && _dict2.size == 1024 && _dict3.size == 1024 && _dict4.size == 1024) {
        "dict size check failed, expected 1024"
    }
}
//
//typedef LookupFunction = int Function(int index);
//
//// 将 BigInt 转换为 4x4 矩阵
//List<List<int>> _textToMatrix(BigInt text) {
//    List<List<int>> matrix = List.generate(4, (_) => []);
//    for (int i = 0; i < 16; i++) {
//        int byteIndex = i ~/ 4;
//        int bitShift = 8 * (15 - i);
//        int byteValue = ((text >> bitShift) & BigInt.from(0xFF)).toInt();
//        matrix[byteIndex].add(byteValue);
//    }
//    return matrix;
//}

val CONST_255 = BigInteger(byteArrayOf(0, 0xFF.toByte()))

fun textToMatrix(bn: BigInteger): List<List<Int>> {
    val matrix = List<MutableList<Int>>(4) { mutableListOf() }
    for (i in 0..<16) {
        val byteIndex = i / 4
        val bitShift = 8 * (15 - i)
        val byteValue = ((bn shr bitShift) and CONST_255).toInt()
        matrix[byteIndex].add(byteValue)
    }
    return matrix
}

// XOR 操作模板
//List<int> _xorArrayTemplate(List<int> a1, List<int> a2, LookupFunction lookup) {
//    return List.generate(a1.length, (i) {
//        final p1 = (a2[i] & 0xF) ^ ((a1[i] << 4) & 0xFF);
//        final v1 = (lookup(p1) >> 4) & 0xFF;
//        final p2 = ((a2[i] >> 4) & 0xF) ^ ((a1[i] >> 4) << 4);
//        final v2 = (lookup(p2) >> 4) & 0xFF;
//        return v1 ^ (v2 << 4);
//    });
//}
inline fun xorArrayTemplate(a1: List<Int>, a2: List<Int>, lookup: (Int) -> Int): List<Int> {
    return List(a1.size) { i ->
        val p1 = (a2[i] and 0xF) xor ((a1[i] shl 4) and 0xFF)
        val v1 = (lookup(p1) shr 4) and 0xFF
        val p2 = ((a2[i] shr 4) and 0xF) xor ((a1[i] shr 4) shl 4)
        val v2 = (lookup(p2) shr 4) and 0xFF
        v1 xor (v2 shl 4)
    }
}

// 添加轮密钥
//List<List<int>> _addRoundKeys(List<List<int>> state, List<List<int>> roundKey, LookupFunction lookup) {
//    return List.generate(4, (i) => _xorArrayTemplate(state[i], roundKey[i], lookup));
//}

inline fun addRoundKeys(
    state: List<List<Int>>,
    roundKey: List<List<Int>>,
    // actually (Byte) -> (Byte) ?
    lookup: (Int) -> Int
): List<List<Int>> {
    return List(4) { i -> xorArrayTemplate(state[i], roundKey[i], lookup) }
}

// 处理状态矩阵
//List<List<int>> _processState(
//List<List<int>> state1,
//List<List<int>> state2,
//LookupFunction lookup,
//int mask1,
//int mask2,
//) {
//    return List.generate(4, (i) {
//        return List.generate(state1[i].length, (j) {
//            final p1 = (state2[i][j] & mask1) ^ ((state1[i][j] << 4) & 0xFF);
//            final v1 = (lookup(p1) >> 4) & 0xFF;
//            final p2 = ((state2[i][j] >> 4) & mask2) ^ ((state1[i][j] >> 4) << 4);
//            final v2 = (lookup(p2) >> 4) & 0xFF;
//            return v1 ^ (v2 << 4);
//        });
//    });
//}

fun processState(
    state1: List<List<Int>>,
    state2: List<List<Int>>,
    lookup: (Int) -> Int,
    mask1: Int,
    mask2: Int
): List<List<Int>> {
    return List(4) { i ->
        List(state1[i].size) { j ->
            val p1 = (state2[i][j] and mask1) xor ((state1[i][j] shl 4) and 0xFF)
            val v1 = (lookup(p1) shr 4) and 0xFF
            val p2 = ((state2[i][j] shr 4) and mask2) xor ((state1[i][j] shr 4) shl 4)
            val v2 = (lookup(p2) shr 4) and 0xFF
            v1 xor (v2 shl 4)
        }
    }
}

// AES 子操作
// ignore: prefer_function_declarations_over_variables
//final _subBytes = (s1, s2) => _processState(s1, s2, (i) => _sBox[i], 0xF, 0xFF);
fun subBytes(s1: List<List<Int>>, s2: List<List<Int>>): List<List<Int>> {
    return processState(s1, s2, { i -> _sBox[i] }, 0xF, 0xFF)
}
// ignore: prefer_function_declarations_over_variables
//final _shiftRows = (s, s3) => _processState(s, s3, (i) => _sBox[i], 0xF, 0xF);
fun shiftRows(s: List<List<Int>>, s3: List<List<Int>>): List<List<Int>> {
    return processState(s, s3, { i -> _sBox[i] }, 0xF, 0xF)
}
// ignore: prefer_function_declarations_over_variables
//final _mixColumns = (s, s4) => _processState(s, s4, (i) => _sBox[i], 0xF, 0xF);
fun mixColumns(s: List<List<Int>>, s4: List<List<Int>>): List<List<Int>> {
    return processState(s, s4, { i -> _sBox[i] }, 0xF, 0xF)
}

// 构建密钥
//String _buildKey(Map<int, String> template, List<int> indices, String source) {
//    return indices.map((i) => template[int.parse(source.substring(i, i + 2), radix: 16) * 4]!).join();
//}
fun buildKey(template: Array<UInt>, indices: List<Int>, source: String): String {
    return indices.joinToString("") { i ->
        template[source.substring(i, i + 2).toInt(16)].toString(16)
    }
}

// 状态矩阵转字符串
//String _stateToString(List<List<int>> state) {
//    return state.expand((row) => row).map((byte) => byte.toRadixString(16).padLeft(2, '0')).join();
//}
@OptIn(ExperimentalStdlibApi::class)
fun stateToString(state: List<List<Int>>): String {
    return state.flatten().map { it.toByte() }.toByteArray().toHexString()
}

//List<List<int>> _encrypt(BigInt input, List<List<int>> mkeySchedule) {
//    List<List<int>> state = _addRoundKeys(_textToMatrix(input), mkeySchedule.sublist(0, 4), (i) => _keySchedule[i]);
//    final keyTemplates = [
//        {'template': _dict1, 'indices': [0, 8, 16, 24]},
//        {'template': _dict2, 'indices': [10, 18, 26, 2]},
//        {'template': _dict3, 'indices': [20, 28, 4, 12]},
//        {'template': _dict4, 'indices': [30, 6, 14, 22]},
//    ];
//
//    var states = keyTemplates.map((t) {
//        return _textToMatrix(BigInt.parse(_buildKey(t['template'] as Map<int, String>, t['indices'] as List<int>, _stateToString(state)), radix: 16));
//    }).toList();
//
//    for (var i = 1; i < 10; i++) {
//        state = _addRoundKeys(_mixColumns(_shiftRows(_subBytes(states[0], states[1]), states[2]), states[3]),
//            mkeySchedule.sublist(4 * i, 4 * (i + 1)),
//            (i) => _sBox[i]);
//
//        if (i != 9) {
//            states = keyTemplates.map((t) {
//                return _textToMatrix(BigInt.parse(_buildKey(t['template'] as Map<int, String>, t['indices'] as List<int>, _stateToString(state)), radix: 16));
//            }).toList();
//        }
//    }
//
//    final finalIndices = [0, 10, 20, 30, 8, 18, 28, 6, 16, 26, 4, 14, 24, 2, 12, 22];
//    final newKey = finalIndices.map((i) {
//        return _dict5[int.parse(_stateToString(state).substring(i, i + 2), radix: 16)]!;
//    }).join();
//
//    return _addRoundKeys(_textToMatrix(BigInt.parse(newKey, radix: 16)), mkeySchedule.sublist(40, 44),
//    (i) => int.parse(_roundConstants[i]!, radix: 16));
//}

fun _encrypt(input: BigInteger, mkeySchedule: List<List<Int>>): List<List<Int>> {
    var state = addRoundKeys(textToMatrix(input), mkeySchedule.subList(0, 4)) { i -> _keySchedule[i] }

    class KeyTemplate(val template:  Array<UInt>, val indices: List<Int>)

    val keyTemplates = listOf(
        KeyTemplate(_dict1, listOf(0, 8, 16, 24)),
        KeyTemplate(_dict2, listOf(10, 18, 26, 2)),
        KeyTemplate(_dict3, listOf(20, 28, 4, 12)),
        KeyTemplate(_dict4, listOf(30, 6, 14, 22))
    )

    val states = keyTemplates.map { t ->
        textToMatrix(BigInteger(buildKey(t.template, t.indices, stateToString(state)), 16))
    }.toMutableList()

    for (i in 1..9) {
        state = addRoundKeys(
            mixColumns(shiftRows(subBytes(states[0], states[1]), states[2]), states[3]),
            mkeySchedule.subList(4 * i, 4 * (i + 1))
        ) { i -> _sBox[i] }

        if (i != 9) {
            states.indices.forEach { j ->
                states[j] = textToMatrix(BigInteger(buildKey(keyTemplates[j].template, keyTemplates[j].indices, stateToString(state)), 16))
            }
        }
    }

    val finalIndices = listOf(0, 10, 20, 30, 8, 18, 28, 6, 16, 26, 4, 14, 24, 2, 12, 22)

    val newKey = ByteArray(finalIndices.size)
    finalIndices.forEachIndexed { index, i ->
        newKey[index] = _dict5[Integer.parseInt(stateToString(state).substring(i, i + 2), 16)].toByte()
    }

    return addRoundKeys(textToMatrix(BigInteger(newKey)), mkeySchedule.subList(40, 44)) { i -> _roundConstants[i].toInt() }
}

// 加密函数
//String _aesEncrypt(String inputHex, String ivHex) {
//    // 魔改aes加密 固定轮密钥 标准的aes可以推出后面的轮密钥
//    final roundKeys = [
//        "8cc1bbc96bc566b80528b0777044afe8",
//        "475bb7b8d7f563bb1d906c77817f05f1",
//        "ee0c4b61cf4fd3619a744038a4b0f887",
//        "036de86538dacfb2d951843df75d3cf5",
//        "fb0ead3988157a3f2a2211ba9c18e9fe",
//        "73d212241f0183a05d757ea66e80f0d8",
//        "260b251051b1d44bb07252166917c70e",
//        "ecdd96f9a9d03d09ae5748d5002b811a",
//        "35457064266861a73891d7fdc5f1286f",
//        "87a52a68d300c4019fede9401c704ad4",
//        "edd9095dc91e3780123c14cbb663a1e4"
//    ];
//
//    BigInt input = BigInt.parse(inputHex, radix: 16);
//    BigInt iv = BigInt.parse(ivHex, radix: 16);
//    BigInt inputWithIV = input ^ iv;
//
//    List<List<int>> mkeySchedule = [];
//    for (String roundKey in roundKeys) {
//        List<int> bytes = [];
//        for (int i = 0; i < roundKey.length; i += 2) {
//            bytes.add(int.parse(roundKey.substring(i, i + 2), radix: 16));
//        }
//        for (int i = 0; i < bytes.length; i += 4) {
//            mkeySchedule.add(bytes.sublist(i, i + 4));
//        }
//    }
//
//    List<List<int>> cipherState = _encrypt(inputWithIV, mkeySchedule);
//    String cipherText = _stateToString(cipherState);
//    print('Encrypted: $cipherText');
//    return cipherText;
//}

fun aesEncrypt(inputHex: String, ivHex: String): String {
    // 魔改aes加密 固定轮密钥 标准的aes可以推出后面的轮密钥
    val roundKeys = listOf(
        "8cc1bbc96bc566b80528b0777044afe8",
        "475bb7b8d7f563bb1d906c77817f05f1",
        "ee0c4b61cf4fd3619a744038a4b0f887",
        "036de86538dacfb2d951843df75d3cf5",
        "fb0ead3988157a3f2a2211ba9c18e9fe",
        "73d212241f0183a05d757ea66e80f0d8",
        "260b251051b1d44bb07252166917c70e",
        "ecdd96f9a9d03d09ae5748d5002b811a",
        "35457064266861a73891d7fdc5f1286f",
        "87a52a68d300c4019fede9401c704ad4",
        "edd9095dc91e3780123c14cbb663a1e4"
    )

    val input = BigInteger(inputHex, 16)
    val iv = BigInteger(ivHex, 16)
    val inputWithIV = input xor iv

    val mkeySchedule = roundKeys.flatMap { roundKey ->
        val bytes = mutableListOf<Int>()
        for (i in roundKey.indices step 2) {
            bytes.add(roundKey.substring(i, i + 2).toInt(16))
        }
        bytes.chunked(4)
    }

    val cipherState = _encrypt(inputWithIV, mkeySchedule)
    val cipherText = stateToString(cipherState)
    println("Encrypted: $cipherText")
    return cipherText
}

//List<int> _transform(Uint8List inputArr, List<int> lookupTable) {
//    return inputArr.map((byte) => lookupTable[byte]).toList();
//}

fun _transform(inputArr: List<Int>, lookupTable: List<Int>): List<Int> {
    return inputArr.map { byte -> lookupTable[byte.toUByte().toInt()] }.toList()
}

// 填充数据函数
//List<int> _padData(List<int> bytes) {
//    int blockSize = 16;
//
//    // 计算需要填充的长度
//    int paddingLength = blockSize - (bytes.length % blockSize);
//    if (paddingLength == blockSize) {
//        paddingLength = blockSize;
//    }
//
//    // 根据填充长度选择填充字节
//    List<int> fillBytes = [
//        0xB9, 0xBA, 0xB8, 0xB3, 0xB1, 0xB2, 0xB0, 0xBF,
//        0xBD, 0xBE, 0xBC, 0xB7, 0xB5, 0xB6, 0xB4, 0x9B
//    ];
//    int fillByte = fillBytes[paddingLength - 1];
//
//    // 填充数据
//    for (int i = 0; i < paddingLength; i++) {
//        bytes.add(fillByte);
//    }
//
//    return bytes;
//}

fun padData(bytes: List<Int>): List<Int> {
    val blockSize = 16

    // 计算需要填充的长度
    var paddingLength = blockSize - (bytes.size % blockSize)
    if (paddingLength == blockSize) {
        paddingLength = blockSize
    }

    // 根据填充长度选择填充字节
    val fillBytes = listOf(0xB9, 0xBA, 0xB8, 0xB3, 0xB1, 0xB2, 0xB0, 0xBF,
        0xBD, 0xBE, 0xBC, 0xB7, 0xB5, 0xB6, 0xB4, 0x9B)
    val fillByte = fillBytes[paddingLength - 1]

    // 填充数据
    return bytes + List(paddingLength) { fillByte }
}

// 主函数
//String myEncrypt(String inputData) {
//
//    // 查找表 (iArr 和 iArr2)
//    final List<int> iArr = [187, 185, 186, 184, 179, 177, 178, 176, 191, 189, 190, 188, 183, 181, 182, 180, 155, 153, 154, 152, 147, 145, 146, 144, 159, 157, 158, 156, 151, 149, 150, 148, 171, 169, 170, 168, 163, 161, 162, 160, 175, 173, 174, 172, 167, 165, 166, 164, 139, 137, 138, 136, 131, 129, 130, 128, 143, 141, 142, 140, 135, 133, 134, 132, 59, 57, 58, 56, 51, 49, 50, 48, 63, 61, 62, 60, 55, 53, 54, 52, 27, 25, 26, 24, 19, 17, 18, 16, 31, 29, 30, 28, 23, 21, 22, 20, 43, 41, 42, 40, 35, 33, 34, 32, 47, 45, 46, 44, 39, 37, 38, 36, 11, 9, 10, 8, 3, 1, 2, 0, 15, 13, 14, 12, 7, 5, 6, 4, 251, 249, 250, 248, 243, 241, 242, 240, 255, 253, 254, 252, 247, 245, 246, 244, 219, 217, 218, 216, 211, 209, 210, 208, 223, 221, 222, 220, 215, 213, 214, 212, 235, 233, 234, 232, 227, 225, 226, 224, 239, 237, 238, 236, 231, 229, 230, 228, 203, 201, 202, 200, 195, 193, 194, 192, 207, 205, 206, 204, 199, 197, 198, 196, 123, 121, 122, 120, 115, 113, 114, 112, 127, 125, 126, 124, 119, 117, 118, 116, 91, 89, 90, 88, 83, 81, 82, 80, 95, 93, 94, 92, 87, 85, 86, 84, 107, 105, 106, 104, 99, 97, 98, 96, 111, 109, 110, 108, 103, 101, 102, 100, 75, 73, 74, 72, 67, 65, 66, 64, 79, 77, 78, 76, 71, 69, 70, 68];
//    final List<int> iArr2 = [0, 2, 1, 3, 8, 10, 9, 11, 4, 6, 5, 7, 12, 14, 13, 15, 32, 34, 33, 35, 40, 42, 41, 43, 36, 38, 37, 39, 44, 46, 45, 47, 16, 18, 17, 19, 24, 26, 25, 27, 20, 22, 21, 23, 28, 30, 29, 31, 48, 50, 49, 51, 56, 58, 57, 59, 52, 54, 53, 55, 60, 62, 61, 63, 128, 130, 129, 131, 136, 138, 137, 139, 132, 134, 133, 135, 140, 142, 141, 143, 160, 162, 161, 163, 168, 170, 169, 171, 164, 166, 165, 167, 172, 174, 173, 175, 144, 146, 145, 147, 152, 154, 153, 155, 148, 150, 149, 151, 156, 158, 157, 159, 176, 178, 177, 179, 184, 186, 185, 187, 180, 182, 181, 183, 188, 190, 189, 191, 64, 66, 65, 67, 72, 74, 73, 75, 68, 70, 69, 71, 76, 78, 77, 79, 96, 98, 97, 99, 104, 106, 105, 107, 100, 102, 101, 103, 108, 110, 109, 111, 80, 82, 81, 83, 88, 90, 89, 91, 84, 86, 85, 87, 92, 94, 93, 95, 112, 114, 113, 115, 120, 122, 121, 123, 116, 118, 117, 119, 124, 126, 125, 127, 192, 194, 193, 195, 200, 202, 201, 203, 196, 198, 197, 199, 204, 206, 205, 207, 224, 226, 225, 227, 232, 234, 233, 235, 228, 230, 229, 231, 236, 238, 237, 239, 208, 210, 209, 211, 216, 218, 217, 219, 212, 214, 213, 215, 220, 222, 221, 223, 240, 242, 241, 243, 248, 250, 249, 251, 244, 246, 245, 247, 252, 254, 253, 255];
//
//    // Step 1: 使用 iArr 转换
//    Uint8List byte1 = Uint8List.fromList(utf8.encode(inputData));
//    List<int> res2 = _padData(_transform(byte1, iArr));
//
//    // Step 2: 转换为十六进制字符串 并分块
//    String input = _bytesToHex(Uint8List.fromList(res2));
//    // 分块处理，每32个字符为一个块
//    List<String> blocks = [];
//    for (int i = 0; i < input.length; i += 32) {
//        blocks.add(input.substring(i, i + 32 > input.length ? input.length : i + 32));
//    }
//
//    // Step 4: AES 加密
//    List<String> signatures = [];
//    // 初始 ivHex 是固定的
//    String ivHex = '99303a3a32343a3992923a3b3a999292';
//    for (String block in blocks) {
//        String signature = _aesEncrypt(block, ivHex);
//        signatures.add(signature);
//        ivHex = signature;
//    }
//
//    // 合并所有签名
//    String finalSignature = signatures.join();
//    print('Signatures: $finalSignature');
//
//    // Step 4: 使用 iArr2 转换
//    Uint8List byteArr = Uint8List.fromList(_hexToBytes(finalSignature));
//    List<int> bArr = byteArr.map((i) => i >= 0 ? i : i + 256).toList();
//    List<int> res = _transform(Uint8List.fromList(bArr), iArr2);
//
//    // Step 5: Base64 编码
//    String base64Str = base64.encode(Uint8List.fromList(res));
//    print('Final Result: $base64Str');
//    return base64Str;
//}

@OptIn(ExperimentalStdlibApi::class, ExperimentalUnsignedTypes::class, ExperimentalEncodingApi::class)
/**
 * v1 签名函数，目前仅在手机端有使用。
 */
fun myEncryptV1(inputData: String): String {
    // 查找表 (iArr 和 iArr2)
    val iArr = listOf(187, 185, 186, 184, 179, 177, 178, 176, 191, 189, 190, 188, 183, 181, 182, 180, 155, 153, 154, 152, 147, 145, 146, 144, 159, 157, 158, 156, 151, 149, 150, 148, 171, 169, 170, 168, 163, 161, 162, 160, 175, 173, 174, 172, 167, 165, 166, 164, 139, 137, 138, 136, 131, 129, 130, 128, 143, 141, 142, 140, 135, 133, 134, 132, 59, 57, 58, 56, 51, 49, 50, 48, 63, 61, 62, 60, 55, 53, 54, 52, 27, 25, 26, 24, 19, 17, 18, 16, 31, 29, 30, 28, 23, 21, 22, 20, 43, 41, 42, 40, 35, 33, 34, 32, 47, 45, 46, 44, 39, 37, 38, 36, 11, 9, 10, 8, 3, 1, 2, 0, 15, 13, 14, 12, 7, 5, 6, 4, 251, 249, 250, 248, 243, 241, 242, 240, 255, 253, 254, 252, 247, 245, 246, 244, 219, 217, 218, 216, 211, 209, 210, 208, 223, 221, 222, 220, 215, 213, 214, 212, 235, 233, 234, 232, 227, 225, 226, 224, 239, 237, 238, 236, 231, 229, 230, 228, 203, 201, 202, 200, 195, 193, 194, 192, 207, 205, 206, 204, 199, 197, 198, 196, 123, 121, 122, 120, 115, 113, 114, 112, 127, 125, 126, 124, 119, 117, 118, 116, 91, 89, 90, 88, 83, 81, 82, 80, 95, 93, 94, 92, 87, 85, 86, 84, 107, 105, 106, 104, 99, 97, 98, 96, 111, 109, 110, 108, 103, 101, 102, 100, 75, 73, 74, 72, 67, 65, 66, 64, 79, 77, 78, 76, 71, 69, 70, 68)
    val iArr2 = listOf(0, 2, 1, 3, 8, 10, 9, 11, 4, 6, 5, 7, 12, 14, 13, 15, 32, 34, 33, 35, 40, 42, 41, 43, 36, 38, 37, 39, 44, 46, 45, 47, 16, 18, 17, 19, 24, 26, 25, 27, 20, 22, 21, 23, 28, 30, 29, 31, 48, 50, 49, 51, 56, 58, 57, 59, 52, 54, 53, 55, 60, 62, 61, 63, 128, 130, 129, 131, 136, 138, 137, 139, 132, 134, 133, 135, 140, 142, 141, 143, 160, 162, 161, 163, 168, 170, 169, 171, 164, 166, 165, 167, 172, 174, 173, 175, 144, 146, 145, 147, 152, 154, 153, 155, 148, 150, 149, 151, 156, 158, 157, 159, 176, 178, 177, 179, 184, 186, 185, 187, 180, 182, 181, 183, 188, 190, 189, 191, 64, 66, 65, 67, 72, 74, 73, 75, 68, 70, 69, 71, 76, 78, 77, 79, 96, 98, 97, 99, 104, 106, 105, 107, 100, 102, 101, 103, 108, 110, 109, 111, 80, 82, 81, 83, 88, 90, 89, 91, 84, 86, 85, 87, 92, 94, 93, 95, 112, 114, 113, 115, 120, 122, 121, 123, 116, 118, 117, 119, 124, 126, 125, 127, 192, 194, 193, 195, 200, 202, 201, 203, 196, 198, 197, 199, 204, 206, 205, 207, 224, 226, 225, 227, 232, 234, 233, 235, 228, 230, 229, 231, 236, 238, 237, 239, 208, 210, 209, 211, 216, 218, 217, 219, 212, 214, 213, 215, 220, 222, 221, 223, 240, 242, 241, 243, 248, 250, 249, 251, 244, 246, 245, 247, 252, 254, 253, 255)

    // Step 1: 使用 iArr 转换
    val byte1 = inputData.hexToUByteArray().map { it.toInt() }
    val res2 = padData(_transform(byte1, iArr))

    // Step 2: 转换为十六进制字符串 并分块
    val input = res2.map { it.toByte() }.toByteArray().toHexString()
    // 分块处理，每32个字符为一个块
    val blocks = input.chunked(32)

    // Step 4: AES 加密
    val signatures = mutableListOf<String>()
    // 初始 ivHex 是固定的
    var ivHex = "99303a3a32343a3992923a3b3a999292"
    for (block in blocks) {
        val signature = aesEncrypt(block, ivHex)
        signatures.add(signature)
        ivHex = signature
    }

    // 合并所有签名
    val finalSignature = signatures.joinToString("")
    println("Signatures: $finalSignature")

    // Step 4: 使用 iArr2 转换
    val byteArr = finalSignature.hexToUByteArray().map { it.toInt() }
    val res = _transform(byteArr, iArr2)

    // Step 5: Base64 编码
    val base64Str = Base64.encode(res.map { it.toByte() }.toByteArray())
    println("Final Result: $base64Str")
    return base64Str
}
